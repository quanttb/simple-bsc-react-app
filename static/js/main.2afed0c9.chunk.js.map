{"version":3,"sources":["components/ConnectWalletModal/index.js","components/LogoutModal/index.js","components/TransferToken/index.js","App.js","reportWebVitals.js","index.js"],"names":["WalletSelector","styled","ConnectWalletModal","isOpenTriggered","handleCloseEvent","onConnectWallet","useDisclosure","isOpen","onOpen","onClose","useEffect","_onClose","closeOnOverlayClick","isCentered","onClick","window","ethereum","web3","Web3","enable","then","result","a","catch","error","alt","src","process","boxSize","LogoutModal","colorScheme","mr","location","reload","TransferToken","useState","statusText","setStatusText","toAddress","setToAddress","amount","setAmount","onSend","eth","getAccounts","accounts","sendTransaction","from","to","value","utils","toWei","toString","on","hash","receipt","transactionHash","console","log","confirmationNumber","placeholder","onChange","e","target","handleToAddressChange","defaultValue","min","str","num","handleAmountChange","App","isConnected","setIsConnected","currentAddress","setCurrentAddress","currentBalance","setCurrentBalance","isConnectWalletModalOpened","setIsConnectWalletModalOpened","isLogoutModalOpened","setIsLogoutModalOpened","setWeb3","_web3","addresses","getBalance","balance","fromWei","fontSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2afed0c9.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport {\n  Image,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport Web3 from 'web3';\n\nconst WalletSelector = styled('div')`\n  cursor: pointer;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  display: flex;\n`;\n\nfunction ConnectWalletModal({\n  isOpenTriggered,\n  handleCloseEvent,\n  onConnectWallet,\n}) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    if (isOpenTriggered) onOpen();\n  }, [isOpenTriggered, onOpen]);\n\n  const _onClose = () => {\n    handleCloseEvent();\n    onClose();\n  };\n\n  const connectWallet = () => {\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      window.ethereum\n        .enable()\n        .then(async (result) => {\n          onConnectWallet(web3);\n        })\n        .catch((error) => {\n          onConnectWallet(null);\n        });\n    }\n\n    _onClose();\n  };\n\n  return (\n    <Modal\n      closeOnOverlayClick={false}\n      isOpen={isOpen}\n      onClose={_onClose}\n      isCentered\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Connect to wallet</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <WalletSelector onClick={connectWallet}>\n            <Image\n              alt=\"Metamask Logo\"\n              src={process.env.PUBLIC_URL + '/images/metamask.svg'}\n              boxSize=\"30px\"\n            />\n            <div>Metamask - Desktop</div>\n          </WalletSelector>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default ConnectWalletModal;\n","import React, { useEffect } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nfunction LogoutModal({ isOpenTriggered, handleCloseEvent }) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    if (isOpenTriggered) onOpen();\n  }, [isOpenTriggered, onOpen]);\n\n  const _onClose = () => {\n    handleCloseEvent();\n    onClose();\n  };\n\n  const _onLogout = () => {\n    _onClose();\n    window.location.reload();\n  };\n\n  return (\n    <Modal\n      closeOnOverlayClick={false}\n      isOpen={isOpen}\n      onClose={_onClose}\n      isCentered\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Your wallet</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Button colorScheme=\"orange\" mr={3} onClick={_onLogout}>\n            Logout\n          </Button>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default LogoutModal;\n","import React, { useState } from 'react';\nimport {\n  Input,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Button,\n  Text,\n} from '@chakra-ui/react';\n\nfunction TransferToken({ web3 }) {\n  const [statusText, setStatusText] = useState('');\n  const [toAddress, setToAddress] = useState('');\n  const [amount, setAmount] = useState('');\n\n  const onSend = async () => {\n    if (web3 && toAddress !== '' && amount > 0) {\n      setStatusText(`Transferring ${amount} BNB to ${toAddress}...`);\n      const accounts = await web3.eth.getAccounts();\n      await web3.eth\n        .sendTransaction({\n          from: accounts[0],\n          to: toAddress,\n          value: web3.utils.toWei(amount.toString()),\n        })\n        .on('transactionHash', function (hash) {})\n        .on('receipt', function (receipt) {\n          setStatusText(`Hash TX: ${receipt.transactionHash}`);\n          console.log();\n        })\n        .on('confirmation', function (confirmationNumber, receipt) {})\n        .on('error', console.error);\n    }\n  };\n\n  const handleToAddressChange = (e) => {\n    setToAddress(e.target.value);\n  };\n\n  const handleAmountChange = (num) => {\n    setAmount(num);\n  };\n\n  return (\n    <>\n      <Text>SEND BNB:</Text>\n      <Input\n        placeholder=\"To Address\"\n        onChange={(e) => handleToAddressChange(e)}\n      ></Input>\n      <NumberInput\n        defaultValue={0}\n        min={0}\n        onChange={(str, num) => handleAmountChange(num)}\n      >\n        <NumberInputField />\n        <NumberInputStepper>\n          <NumberIncrementStepper />\n          <NumberDecrementStepper />\n        </NumberInputStepper>\n      </NumberInput>\n      <Button onClick={onSend}>SEND</Button>\n      <Text>{statusText}</Text>\n    </>\n  );\n}\n\nexport default TransferToken;\n","import React, { useState } from 'react';\nimport { Button, Text } from '@chakra-ui/react';\nimport ConnectWalletModal from './components/ConnectWalletModal';\nimport LogoutModal from './components/LogoutModal';\nimport TransferToken from './components/TransferToken';\n\nfunction App() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [currentAddress, setCurrentAddress] = useState('');\n  const [currentBalance, setCurrentBalance] = useState(0);\n  const [isConnectWalletModalOpened, setIsConnectWalletModalOpened] = useState(\n    false\n  );\n  const [isLogoutModalOpened, setIsLogoutModalOpened] = useState(false);\n  const [web3, setWeb3] = useState(null);\n\n  const onConnectWalletModalOpen = () => {\n    setIsConnectWalletModalOpened(true);\n  };\n\n  const onConnectWalletModalClose = () => {\n    setIsConnectWalletModalOpened(false);\n  };\n\n  const onLogoutModalOpen = () => {\n    setIsLogoutModalOpened(true);\n  };\n\n  const onLogoutModalClose = () => {\n    setIsLogoutModalOpened(false);\n  };\n\n  const onConnectWallet = async (_web3) => {\n    setWeb3(_web3);\n    if (_web3) {\n      setIsConnected(true);\n\n      const addresses = await _web3.eth.getAccounts();\n      setCurrentAddress(addresses[0]);\n\n      const balance = await _web3.eth.getBalance(addresses[0]);\n      setCurrentBalance(_web3.utils.fromWei(balance));\n    }\n  };\n\n  return (\n    <div>\n      <Text fontSize=\"3xl\">Metamask Demo</Text>\n      {!isConnected && (\n        <Button onClick={onConnectWalletModalOpen}>Connect Wallet</Button>\n      )}\n      {isConnected && (\n        <>\n          <Button onClick={onLogoutModalOpen}>\n            {currentAddress} - {currentBalance} BNB\n          </Button>\n          <TransferToken web3={web3}></TransferToken>\n        </>\n      )}\n\n      <ConnectWalletModal\n        isOpenTriggered={isConnectWalletModalOpened}\n        handleCloseEvent={onConnectWalletModalClose}\n        onConnectWallet={onConnectWallet}\n      ></ConnectWalletModal>\n\n      <LogoutModal\n        isOpenTriggered={isLogoutModalOpened}\n        handleCloseEvent={onLogoutModalClose}\n      ></LogoutModal>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\n\nReactDOM.render(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}